{"version":3,"sources":["FlashCard.js","FlashCardList.js","App.js","index.js"],"names":["FlashCard","flashcard","useState","flip","setFlip","height","setHeight","frontSide","useRef","backSide","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","src","ref","map","option","index","key","FlashCardList","flashcards","id","SAMPLE_QUESTIONS","App","setFlashCards","categories","setCategories","isPageLoaded","setPageLoaded","progress","setProgress","categorical","amountEl","decodeString","encodedString","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","color","onLoaderFinished","onSubmit","e","preventDefault","params","amount","category","results","result","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.03166e7e.chunk.js","sourcesContent":["import React, {useState,useEffect,useRef} from 'react';\n\nfunction FlashCard({ flashcard }) {\n\n\tconst [flip, setFlip] = useState(false);\n\tconst [height, setHeight] =  useState('initial');\n\n\tconst frontSide = useRef();\n\tconst backSide = useRef();\n\n\n\tfunction setMaxHeight() {\n\t\tconst frontHeight = frontSide.current.getBoundingClientRect().height;\n\t\tconst backHeight = backSide.current.getBoundingClientRect().height;\n\t\tsetHeight(Math.max(frontHeight,backHeight, 100))\n\t}\n\n\tuseEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options])\n\tuseEffect(() => {\n\t\twindow.addEventListener('resize', setMaxHeight)\n\t\treturn () => window.removeEventListener('resize', setMaxHeight)\n\t}, [])\n\n\treturn(\n\t\t<div \n\t\tclassName={`card ${flip ? 'flip' : ''}`}\n\t\tstyle = {{height:height}}\n\t\tonClick={() => setFlip(!flip)}>\n\t\t<div className=\"iconID\"><img src=\"https://img.icons8.com/ios/30/000000/ellipsis.png\"/></div>\n\t\t<div className=\"front\" ref={frontSide}>\n\t\t\t{flashcard.question}\n\t\t\t<div className=\"flashcard-options\">\n\t\t\t\t{flashcard.options.map((option,index) => {\n\t\t\t\t\treturn <div className=\"flashcard-option\" key={index}>\n\t\t\t\t\t{index+1}) {option}\n\t\t\t\t\t</div>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t\t<div className=\"back\" ref={backSide}>\n\t\t\t{flashcard.answer}\n\t\t</div>\n\n\t\t</div>\n\t)\n}\n\nexport default FlashCard;","import React from 'react';\nimport FlashCard from './FlashCard.js'\n\nfunction FlashCardList({ flashcards }) {\n\treturn(\n\t\t<div className=\"card-grid\">\n\t\t\t{flashcards.map(flashcard => {\n\t\t\t\treturn <FlashCard flashcard={flashcard} key={flashcard.id} />\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\nexport default FlashCardList;","import React, { useState, useEffect, useRef } from 'react';\nimport FlashCardList from './FlashCardList.js';\nimport './app.css';\nimport axios from 'axios';\nimport LoadingBar from 'react-top-loading-bar';\n\nfunction App() {\n\n  const [flashcards, setFlashCards] = useState(SAMPLE_QUESTIONS);\n  const [categories, setCategories] = useState([]);\n  const [isPageLoaded, setPageLoaded] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const categorical = useRef();\n  const amountEl = useRef();\n\n  useEffect(() => {\n    axios\n      .get('https://opentdb.com/api_category.php')\n      .then(res => {\n        setCategories(res.data.trivia_categories)    \n      })\n  }, [])\n\n  useEffect(() => {\n    setPageLoaded(true);\n  }, [flashcards])\n\nfunction decodeString(encodedString) {\n  const textArea = document.createElement('textarea');\n  textArea.innerHTML = encodedString;\n  return textArea.value;\n}\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  axios\n      .get('https://opentdb.com/api.php',{params: {amount: amountEl.current.value,category: categorical.current.value}})\n      .then(res => {\n        setFlashCards(\n          res.data.results.map((result,index) => {\n          const answer = decodeString(result.correct_answer);\n          const options = [...result.incorrect_answers.map(a => decodeString(a)), answer] \n          return {\n            id: `${index}-${Date.now()}`,\n            question: decodeString(result.question),\n            answer: result.correct_answer,\n            options: options.sort(() => Math.random() - .5)\n          }\n        })\n        )\n        // console.log(res.data)\n      })  \n}\n\n  return (\n    <>\n    <LoadingBar\n        color='#2d2d2d'\n        progress={progress}\n        onLoaderFinished={() => setProgress(0)}\n    />\n    <div className=\"top-level\">\n      <h1>Brush-up</h1>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categorical}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>\n                {category.name}\n              </option> \n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of Questions</label>\n          <input type=\"number\" id=\"amount\" min=\"1\" max=\"50\" defaultValue=\"10\" ref={amountEl} />\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\" onClick={() => setProgress(isPageLoaded ? 100 : progress + 10)}>Generate</button> \n        </div>\n      </form>\n    </div>  \n      <div className=\"container\">\n        <FlashCardList flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nconst SAMPLE_QUESTIONS   = [\n  {\n    id: 1,\n    question: 'Generate New Questions ?',\n    answer: 'Select category and no.of questions from above.',\n    options: [\n    ]\n  }\n]\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}